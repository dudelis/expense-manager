@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@inject NavigationManager navigationManager;
@inject HttpClient httpClient;

    
<BSRow>
    <BSCol>
        <BSButton Class="btn btn-primary btn-circle float-right" OnClick="AddItem">
            <i class="fas fa-plus"></i>
        </BSButton>
    </BSCol>
</BSRow>
<BSRow>
    <BSCol>
        @if (_task.IsCompleted)
        {
            <GridComponent T="AccountTypeModel" Grid="@_grid" OnRowClicked="@EditItem"></GridComponent>
        }
        else
        {
            <p><em>Loading...</em></p>
        }
    </BSCol>
</BSRow>
<AccountTypeEdit
    @ref="EditInstance"
    ModalHeader="Add/Edit Account Type"
    OnHide="@(()=> _grid.UpdateGrid())"
    Model="@selectedItem" />


@code {
    private AccountTypeEdit EditInstance;
    private CGrid<AccountTypeModel> _grid;
    private Task _task;
    private Modal AccountTypeModal;
    private AccountTypeModel selectedItem { get; set; }

    
    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        selectedItem = selectedItem ?? new AccountTypeModel();
    }
    
    public static Action<IGridColumnCollection<AccountTypeModel>> Columns = c =>
    {
        c.Add(o => o.Id).SetWidth("10%").Sortable(true);
        c.Add(o => o.Name).SetWidth("90%").Sortable(true);
    };

    protected override async Task OnInitializedAsync()
    {
        string url = navigationManager.BaseUri + "api/accounttype";
        var query = new QueryDictionary<StringValues>();
        var client = new GridClient<AccountTypeModel>(url, query, false, "AccountTypes", Columns)
            .Searchable(true, true)
            .WithPaging(10)
            .Selectable(true);
        _grid = client.Grid;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }
    void AddItem()
    {
        selectedItem = new AccountTypeModel();
        EditInstance.Toggle();
    }
    protected void EditItem(object item)
    {
        if (item.GetType() == typeof(AccountTypeModel))
        {
            
            var newItem = (AccountTypeModel)item;
            selectedItem = newItem;
            this.StateHasChanged();
            EditInstance.Toggle();
        }
    }
}
