@inject NavigationManager navigationManager;
@inject HttpClient httpClient;

    <BSModal @ref="ModalInstance" HideEvent="OnHide" Size="Size.Large">
        <BSModalHeader OnClick="CloseSubview">
            @ModalHeader
        </BSModalHeader>
        <BSModalBody>
            <BSContainer IsFluid="true">
                <BSRow>
                    <BSCol>
                        <BSForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <BSRow Class="form-row">
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="Name">Name</BSLabel>
                                        <BSInput Id="Name" InputType="InputType.Text" PlaceHolder="Enter Payee Name" @bind-Value="Model.Name"></BSInput>
                                        <BSFormFeedback For="@(() => Model.Name)" />
                                    </BSFormGroup>
                                </BSCol>
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="Website">Website</BSLabel>
                                        <BSInput Id="Website" InputType="InputType.Url" PlaceHolder="Enter Website" @bind-Value="Model.WebSite"></BSInput>
                                        <BSFormFeedback For="@(() => Model.WebSite)" />
                                    </BSFormGroup>
                                </BSCol>
                            </BSRow>
                            <BSRow Class="form-row">
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="AccountNumber">Account Number</BSLabel>
                                        <BSInput Id="AccountNumber" InputType="InputType.Text" PlaceHolder="Enter Account Number" @bind-Value="Model.AccountNumber"></BSInput>
                                        <BSFormFeedback For="@(() => Model.AccountNumber)" />
                                    </BSFormGroup>
                                </BSCol>
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="PhoneNumber">Phone Number</BSLabel>
                                        <BSInput Id="PhoneNumber" InputType="InputType.Text" PlaceHolder="Enter Phone Number" @bind-Value="Model.PhoneNumber"></BSInput>
                                        <BSFormFeedback For="@(() => Model.PhoneNumber)" />
                                    </BSFormGroup>
                                </BSCol>
                            </BSRow>
                            <BSRow Class="form-row">
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="Notes">Notes</BSLabel>
                                        <BSBasicInput Id="Notes" Rows="5" InputType="InputType.TextArea" PlaceHolder="Enter Account Number" @bind-Value="Model.Notes"></BSBasicInput>
                                        <BSFormFeedback For="@(() => Model.Notes)" />
                                    </BSFormGroup>
                                </BSCol>
                            </BSRow>
                            <BSRow Class="form-row">
                                <BSCol Class="d-flex justify-content-around">
                                    <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" Value="Save"></BSButton>
                                    <BSButton IsOutline="true" Color="Color.Secondary" @onclick="CloseSubview">Cancel</BSButton>
                                </BSCol>
                                @if (Model.Id > 0)
                                {
                                    <div class="float-right">
                                        <DeleteButtonWithConfirm OnConfirmDelete="DeleteItem" />
                                    </div>
                                }
                            </BSRow>
                        </BSForm>
                    </BSCol>
                </BSRow>
            </BSContainer>
        </BSModalBody>        
    </BSModal>

@code{
    [Parameter]
    public PayeeModel Model { get; set; }
    [Parameter]
    public string ModalHeader { get; set; }
    [Parameter]
    public EventCallback OnHide { get; set; }

    private BSModal ModalInstance;
    private DeleteButtonWithConfirm deleteButton;



    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Model = Model ?? new PayeeModel();
    }

    async Task HandleValidSubmit()
    {
        if (Model.Id == 0)
        {
            await httpClient.PostJsonAsync("/api/payee", Model);
            ModalInstance.Hide();
        } else
        {
            await httpClient.PutJsonAsync($"/api/payee/{Model.Id}", Model);
            ModalInstance.Hide();
        }
    }
    async Task DeleteItem()
    {
        await httpClient.DeleteAsync($"/api/payee/{Model.Id}");
        this.CloseSubview();
    }
    void CloseSubview()
    {
        this.ModalInstance.Toggle();
    }

    public void Toggle()
    {
        ModalInstance.Toggle();
    }
}